{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Cyber Security Stack \u00b6 Note A Cyber Security Library site. classDiagram Animal <|-- Duck Animal <|-- Fish Animal <|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } class Person { public : Person () {}; std :: string m_name ; int m_age = 0 ; bool m_sex = 0 ; std :: string toString () const { std :: stringstream ss ; ss << \"[Person name=\" << m_name << \" age=\" << m_age << \" sex=\" << m_sex << \"]\" ; return ss . str (); } bool operator == ( const Person & oth ) const { return m_name == oth . m_name && m_age == oth . m_age && m_sex == oth . m_sex ; } }; class.person : name : tester age : 20 sex : male role : eng result : true","title":"Home"},{"location":"#welcome-to-cyber-security-stack","text":"Note A Cyber Security Library site. classDiagram Animal <|-- Duck Animal <|-- Fish Animal <|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } class Person { public : Person () {}; std :: string m_name ; int m_age = 0 ; bool m_sex = 0 ; std :: string toString () const { std :: stringstream ss ; ss << \"[Person name=\" << m_name << \" age=\" << m_age << \" sex=\" << m_sex << \"]\" ; return ss . str (); } bool operator == ( const Person & oth ) const { return m_name == oth . m_name && m_age == oth . m_age && m_sex == oth . m_sex ; } }; class.person : name : tester age : 20 sex : male role : eng result : true","title":"Welcome to Cyber Security Stack"}]}